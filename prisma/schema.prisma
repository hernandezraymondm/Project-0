generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  SUPERADMIN
  USER
  GUEST
  MODERATOR
  EDITOR
  VIEWER
  CONTRIBUTOR
  MANAGER
  DEVELOPER
  SUPPORT
  ANALYST
  AUDITOR
  VENDOR
  CUSTOMER
  STUDENT
  TEACHER
}

model User {
  id               String    @id @default(cuid())
  name             String
  email            String    @unique
  emailVerified    DateTime? @map("email_verified")
  image            String?
  password         String?
  role             UserRole  @default(USER)
  accounts         Account[]
  twoFactorSecret  String?
  twoFactorEnabled Boolean   @default(false)

  // Optional for WebAuthn support
  Authenticator Authenticator[]
  ActivityLog   Log[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Log {
  id        String   @id @default(cuid())
  userId    String
  action    String
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, action])
  @@map("logs")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  code    String   @map("verification_code")
  expires DateTime

  @@unique([email, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  code    String   @map("reset_code")
  expires DateTime

  @@unique([email, token])
  @@map("password_reset_token")
}
